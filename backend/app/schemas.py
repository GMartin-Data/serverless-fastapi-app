from typing import Optional

from pydantic import BaseModel, ConfigDict, Field


class ItemBase(BaseModel):
    name: str = Field(
        ..., description="The name of the item", examples=["My Awesome Item"]
    )
    description: Optional[str] = Field(
        default=None,
        description="An optional description of the item",
        examples=["A truly wonderful widget."],
    )
    price: float = Field(gt=0, description="The price must be greater than zero.")
    is_offer: Optional[bool] = Field(
        default=None,
        description="Indicates if the item is on a special offer.",
        examples=[True, False],
    )


class ItemCreate(ItemBase):
    # For creating an item, we take all fields from ItemBase
    # 'id' will be generated by the server, so it's not here
    pass


class ItemUpdate(ItemBase):
    # For updating, ALL FIELDS SHOULD BE OPTIONAL
    name: Optional[str] = None
    description: Optional[str] = None
    price: Optional[float] = Field(
        default=None,
        gt=0,
        description="The price must be greater than zero if provided",
    )
    is_offer: Optional[bool] = None


class Item(ItemBase):
    # Represents the item that will be STORED.
    id: int = Field(
        ..., description="The unique identifier of the item", examples=[1, 42, 101]
    )

    # Pydantic V2 feature for ORM (later)
    model_config = ConfigDict(from_attributes=True)
