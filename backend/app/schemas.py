from typing import Optional

from pydantic import BaseModel, Field


class ItemBase(BaseModel):
    name: str
    description: Optional[str] = None
    price: float = Field(gt=0, description="The price must be greater than zero.")
    is_offer: Optional[bool] = None


class ItemCreate(ItemBase):
    # For creating an item, we take all fields from ItemBase
    # 'id' will be generated by the server, so it's not here
    pass


class ItemUpdate(ItemBase):
    # For updating, ALL FIELDS SHOULD BE OPTIONAL
    name: Optional[str] = None
    description: Optional[str] = None
    price: Optional[float] = Field(
        default=None,
        gt=0,
        description="The price must be greater than zero if provided",
    )
    is_offer: Optional[bool] = None


class Item(ItemBase):
    # Represents the item that will be STORED.
    id: int  # Or str if favoring UUIDs

    # Pydantic V2 feature for ORM (later)
    class Config:
        from_attributes = True
